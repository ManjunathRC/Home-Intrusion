/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package homeintrusion;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;

/**
 *
 * @author manju
 */
public class DashBoardFinal extends javax.swing.JFrame {
String entryNameDone = "";
ArrayList<Integer> distances = new ArrayList<Integer>();
ArrayList<Integer> speeds = new ArrayList<Integer>();

ArrayList<String> totalCorrectTrialsForMlCurrent = new ArrayList<String>();
ArrayList<String> totalWrongTrialsForMlCurrent = new ArrayList<String>();

ArrayList<String> totalCorrectTrialsForMlPast = new ArrayList<String>();
ArrayList<String> totalWrongTrialsForMlPast = new ArrayList<String>();
 ArrayList<Integer> trialHomes = new ArrayList<Integer>();
String sf;
String file_name;
String path;
int speed = 0;
int distance = 0;
int trialCount = 0;
String houseName = "";
 ArrayList<Integer> speedRanges = new ArrayList<Integer>();
int acutalOriginalSpeed = 0;
int percentage = 0;
int trialPassword = 0;
int toUpdate = 0;
String toUpdateFileName = "";

    public DashBoardFinal() {
        initComponents();
    }
     public DashBoardFinal(String entryName) {
         entryNameDone = entryName;
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        l1 = new javax.swing.JLabel();
        l2 = new javax.swing.JLabel();
        l4 = new javax.swing.JLabel();
        l3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        face = new javax.swing.JLabel();
        entry = new javax.swing.JButton();
        trial = new javax.swing.JTextField();
        pwd = new javax.swing.JButton();
        passWordEntry = new javax.swing.JPasswordField();
        si = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(null);

        l1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/homeintrusion/fe.png"))); // NOI18N
        l1.setText("First Entry");
        getContentPane().add(l1);
        l1.setBounds(0, 0, 250, 190);

        l2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/homeintrusion/re.jpg"))); // NOI18N
        l2.setText("Destination");
        getContentPane().add(l2);
        l2.setBounds(380, 50, 230, 140);

        l4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/homeintrusion/main.jpg"))); // NOI18N
        l4.setText("Main Entry");
        getContentPane().add(l4);
        l4.setBounds(390, 320, 250, 180);

        l3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/homeintrusion/se.jpg"))); // NOI18N
        l3.setText("Second Entry");
        getContentPane().add(l3);
        l3.setBounds(10, 310, 250, 210);

        jButton1.setText("show parameters");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(290, 10, 150, 25);
        getContentPane().add(face);
        face.setBounds(260, 200, 150, 140);

        entry.setText("ENTER");
        entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryActionPerformed(evt);
            }
        });
        getContentPane().add(entry);
        entry.setBounds(480, 10, 110, 25);
        getContentPane().add(trial);
        trial.setBounds(600, 10, 40, 30);

        pwd.setText("password");
        pwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdActionPerformed(evt);
            }
        });
        getContentPane().add(pwd);
        pwd.setBounds(650, 50, 150, 25);
        getContentPane().add(passWordEntry);
        passWordEntry.setBounds(651, 90, 150, 22);

        si.setText("select image");
        si.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siActionPerformed(evt);
            }
        });
        getContentPane().add(si);
        si.setBounds(650, 140, 150, 25);

        jButton2.setText("trials");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(770, 420, 120, 25);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
         try{
             
     
       trialHomes.clear();      
       String firstPath = "trials/home1/trial.txt";
        String secondPath = "trials/home2/trial.txt";
        String thirdPath = "trials/home3/trial.txt";
        String fourthPath = "trials/home4/trial.txt";
        String fifthPath = "trials/home5/trial.txt";      
        ArrayList<String> trials = new ArrayList<String>();
        trials.clear();
        ReadFileData rd = new ReadFileData();
        trials.add(rd.fileData(firstPath));
        trials.add(rd.fileData(secondPath));
        trials.add(rd.fileData(thirdPath));
        trials.add(rd.fileData(fourthPath));
        trials.add(rd.fileData(fifthPath));     
        for(int i=0;i<trials.size();i++){
            String trialNumber = trials.get(i);
            trialHomes.add(Integer.parseInt(trialNumber));
        } 
             pwd.setEnabled(false);
             si.setEnabled(false);
       distances.clear();
       speeds.clear();
       FileInputStream fis = new FileInputStream("dist.txt");
       ObjectInputStream ois = new ObjectInputStream(fis);
       distances = (ArrayList<Integer>)ois.readObject();
       ois.close();
       fis.close();
       
       FileInputStream fisHouse = new FileInputStream("hname.txt");
       ObjectInputStream isHouse = new ObjectInputStream(fisHouse);
       String houseName = (String)isHouse.readObject();
       isHouse.close();
       fisHouse.close();
       
       FileInputStream fisSpeed = new FileInputStream("speed.txt");
       ObjectInputStream isSpeed = new ObjectInputStream(fisSpeed);
       speeds = (ArrayList<Integer>)isSpeed.readObject();
       isSpeed.close();
       fisSpeed.close();
       String distancesStr = distances.get(0)+" , "+distances.get(1)+" , "+distances.get(2);
       JOptionPane.showMessageDialog(null, distancesStr);
       
       String fileName = "";
       if(houseName.endsWith("home1")){
        speed = speeds.get(0);
        fileName = "speed/home1/speed.txt";
        trialCount = trialHomes.get(0);
        toUpdateFileName = "trials/home1/trial.txt";
       }
       else if(houseName.endsWith("home2")){
        speed = speeds.get(1);
        fileName = "speed/home2/speed.txt";
        trialCount = trialHomes.get(1);
        toUpdateFileName = "trials/home2/trial.txt";
       }
       else if(houseName.endsWith("home3")){
        speed = speeds.get(2);
        fileName = "speed/home3/speed.txt";
        trialCount = trialHomes.get(2);
        toUpdateFileName = "trials/home3/trial.txt";
       }
       else if(houseName.endsWith("home4")){
        speed = speeds.get(3);
        fileName = "speed/home4/speed.txt";
        trialCount = trialHomes.get(3);
        toUpdateFileName = "trials/home4/trial.txt";
       }
       else if(houseName.endsWith("home5")){
        speed = speeds.get(4);
        fileName = "speed/home5/speed.txt";
        trialCount = trialHomes.get(4);
        toUpdateFileName = "trials/home5/trial.txt";
       }
       //JOptionPane.showMessageDialog(null,houseName+" is selected and the speed is "+speed);
        ArrayList<String> values = new ArrayList<String>();
        values.clear();
        FileInputStream fisF = new FileInputStream(fileName);
        byte bbF[] = new byte[fisF.available()];
        fisF.read(bbF);
        fisF.close();
        String oldString = new String(bbF);
        StringTokenizer stF = new StringTokenizer(oldString," ");
        while(stF.hasMoreTokens()){
            values.add(stF.nextToken());
        }
             
             totalCorrectTrialsForMlCurrent.clear();
             totalWrongTrialsForMlCurrent.clear();
             
             totalCorrectTrialsForMlPast.clear();
             totalWrongTrialsForMlPast.clear();
             
             FileInputStream fisG = new FileInputStream("ml/goodml.txt");
             byte bbG[] = new byte[fisG.available()];
             fisG.read(bbG);
             fisG.close();
             
             FileInputStream fisB = new FileInputStream("ml/badml.txt");
             byte bbB[] = new byte[fisB.available()];
             fisB.read(bbB);
             fisB.close();
             
             if(bbG.length>0){
                 String strG = new String(bbG);
                 StringTokenizer stG = new StringTokenizer(strG,"\r\n");
                 while(stG.hasMoreTokens()){
                   totalCorrectTrialsForMlPast.add(stG.nextToken()) ; 
                 }
             }
             if(bbB.length>0){
                 String strB = new String(bbB);
                 StringTokenizer stB = new StringTokenizer(strB,"\r\n");
                 while(stB.hasMoreTokens()){
                   totalWrongTrialsForMlPast.add(stB.nextToken());  
                 }
             }
             trial.setText("0");
             trial.setEditable(false);
             //l1.setVisible(false);
             //l2.setVisible(false);
             //l3.setVisible(false);
             //l4.setVisible(false);
             if(entryNameDone.equals("ENTRY1")){
               l1.setVisible(true);  
               l2.setText("ENTRY2");
               l3.setText("ENTRY3");
               distance = distances.get(0);
              acutalOriginalSpeed = Integer.parseInt(values.get(0));
             }
             else if(entryNameDone.equals("ENTRY2")){
                l2.setVisible(true);  
                l1.setText("ENTRY1");
                l3.setText("ENTRY3");
                distance = distances.get(1);  
                acutalOriginalSpeed = Integer.parseInt(values.get(1));
             }
             else if(entryNameDone.equals("ENTRY3")){
                l3.setVisible(true);  
                l1.setText("ENTRY1");
                l2.setText("ENTRY2");
                distance = distances.get(2);
                acutalOriginalSpeed = Integer.parseInt(values.get(2));
             }
             
             
             
             //
             
             JOptionPane.showMessageDialog(null,"Person entered through "+entryNameDone+" and the distance from Door to Alarm Panel is "+distance+" and the time threshold for this door is "+acutalOriginalSpeed);
            
             speedRanges.clear();
             speedRanges.add(acutalOriginalSpeed-2);
             speedRanges.add(acutalOriginalSpeed-1);
             speedRanges.add(acutalOriginalSpeed);
             speedRanges.add(acutalOriginalSpeed+1);
             speedRanges.add(acutalOriginalSpeed+2);
             
             JOptionPane.showMessageDialog(null, speedRanges);
             
         }catch(Exception e){
             System.out.println(e);
         }
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{
       
       distances.clear();
       speeds.clear();
       FileInputStream fis = new FileInputStream("dist.txt");
       ObjectInputStream ois = new ObjectInputStream(fis);
       distances = (ArrayList<Integer>)ois.readObject();
       ois.close();
       fis.close();
       
       FileInputStream fisHouse = new FileInputStream("hname.txt");
       ObjectInputStream isHouse = new ObjectInputStream(fisHouse);
       houseName = (String)isHouse.readObject();
       isHouse.close();
       fisHouse.close();
       
       FileInputStream fisSpeed = new FileInputStream("speed.txt");
       ObjectInputStream isSpeed = new ObjectInputStream(fisSpeed);
       speeds = (ArrayList<Integer>)isSpeed.readObject();
       isSpeed.close();
       fisSpeed.close();
       String distancesStr = distances.get(0)+" , "+distances.get(1)+" , "+distances.get(2);
       JOptionPane.showMessageDialog(null, distancesStr);
       
       
       if(houseName.endsWith("home1")){
        speed = speeds.get(0);
       }
       else if(houseName.endsWith("home2")){
        speed = speeds.get(1);
       }
       else if(houseName.endsWith("home3")){
        speed = speeds.get(2);
       }
       else if(houseName.endsWith("home4")){
        speed = speeds.get(3);
       }
       else if(houseName.endsWith("home5")){
        speed = speeds.get(4);
       }
       //JOptionPane.showMessageDialog(null,houseName+" is selected and the speed is "+speed);
       
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void entryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryActionPerformed
        try{
            
          String enteredSpeed = JOptionPane.showInputDialog(null, "ENTER SPEED");
          int actSpeedEntered = Integer.parseInt(enteredSpeed);
          int result = distance/actSpeedEntered;
          toUpdate = 0;
          if(speedRanges.contains(result)){
             percentage = 20;
             toUpdate = (result + acutalOriginalSpeed)/2;
          }
          JOptionPane.showMessageDialog(null, toUpdate+" "+percentage);
          entry.setEnabled(false);
            pwd.setEnabled(true);
         /*   
        //old code  starts..  
        if(trial.getText().equals("3")){
            JOptionPane.showMessageDialog(null, "NO OF TRIALS CROSSED THRESHOLD ...!");
            entry.setEnabled(false);
            if(totalCorrectTrialsForMlCurrent.size()>totalWrongTrialsForMlCurrent.size()){
                JOptionPane.showMessageDialog(null, "THIS PERSON IS NOT AN INTRUDER");
            }
            else{
                JOptionPane.showMessageDialog(null, "THIS PERSON IS AND INTRUDER");
            }
        }
        else{
        String speedStr = JOptionPane.showInputDialog(null, "Enter the speed");
        int speedEntered = Integer.parseInt(speedStr);        
        JFileChooser fc = new JFileChooser(".");
        int option = fc.showOpenDialog(null);
        if(option == JFileChooser.APPROVE_OPTION){
            sf = fc.getSelectedFile().getAbsolutePath();
             File fn1 = new File(sf);
             file_name = fn1.getName();
             path = sf;
            
        }
        face.setIcon(new ImageIcon(sf));
        //
        String actualPath = "";
        //
        String tCount = trial.getText();
        int tCountInt = Integer.parseInt(tCount);
        int currentCount = ++tCountInt;
        trial.setText(currentCount+"");
        //image comparision code starts...
        }
        //image comparision code ends..
        
        //old code ends...
          */
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_entryActionPerformed

    private void pwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdActionPerformed
        try{
            
        if(trialPassword>=trialCount){
            JOptionPane.showMessageDialog(null, "your password trial is done "+trialCount+" times !");
            pwd.setEnabled(false);
            passWordEntry.setEnabled(false);
                    si.setEnabled(true);
        }
        else if(trialPassword<trialCount){          
          FileInputStream fis = new FileInputStream("password.txt");
          byte bb[] = new byte[fis.available()];
          fis.read(bb);
          fis.close();
          String genPassWord = new String(bb);          
          String pWord = passWordEntry.getText();
          //
          if(genPassWord.equals(pWord)){
              percentage = percentage + 30;
              JOptionPane.showMessageDialog(null,"success");
              //
              toUpdate = (trialPassword + trialCount)/2;
              toUpdate = toUpdate+1;
              FileOutputStream fosTrail = new FileOutputStream(toUpdateFileName);
              String toUpdateFileTrail = toUpdate+"";
              fosTrail.write(toUpdateFileTrail.getBytes());
              fosTrail.close();
              
              //
              pwd.setEnabled(false);
              passWordEntry.setEnabled(false);
              si.setEnabled(true);
              
              if(percentage>65){
                  System.out.println(houseName+" "+entryNameDone+" "+toUpdate);
            UpdateSpeedML uml = new UpdateSpeedML();
            uml.updateSpeed(houseName, entryNameDone, toUpdate+"");
        }
          }
          else{
             JOptionPane.showMessageDialog(null,"wrong"); 
             ++trialPassword;
          }
          //
        }
        JOptionPane.showMessageDialog(null,percentage);
        }catch(Exception e){
            System.out.println(e+" in password action");
        }
    }//GEN-LAST:event_pwdActionPerformed

    private void siActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siActionPerformed
        try{
        JFileChooser fc = new JFileChooser(".");
        int option = fc.showOpenDialog(null);
        if(option == JFileChooser.APPROVE_OPTION){
            sf = fc.getSelectedFile().getAbsolutePath();
             File fn1 = new File(sf);
             file_name = fn1.getName();
             path = sf;
            
        }
        String matchFound = "NO";
        face.setIcon(new ImageIcon(sf));
        System.out.println("a");
        ImageComparisionFinal im = new ImageComparisionFinal();
        System.out.println("b");
        ArrayList<Double> allMatchPercentages = new ArrayList<Double>();
        allMatchPercentages.clear();
       // System.out.println(im.getPercentageOfMatchings(path));
        allMatchPercentages = im.getPercentageOfMatchings(path);
        System.out.println("c");
        for(int i=0;i<allMatchPercentages.size();i++){
            double value = allMatchPercentages.get(i);
            if(value>90){
                matchFound = "YES";
            }
        }
        if(matchFound.equals("YES")){
            percentage = percentage + 50;
        }
        if(percentage>65){
            UpdateSpeedML uml = new UpdateSpeedML();
            uml.updateSpeed(houseName, entryNameDone, toUpdate+"");
            JOptionPane.showMessageDialog(null, "NORMAL ENTRY");
        }
        else if(percentage<=33){
           JOptionPane.showMessageDialog(null, "INTRUDER FOUND");
           //
         URL u=new URL("http://sms.goforsms.com/sendsms.asp?user=prajwal450@gmail.com&password=358287512&sender=sasi&text=INTRUDERFOUND&PhoneNumber=919731775380&track=1");
           URLConnection yc =u.openConnection();
	   yc.getInputStream(); //since this is hand shaking mechanism so we need to capture the input stream so that message
           //will be broad cast...!
           System.out.println("send sms successfully");
           
           //
        }
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_siActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         try{
        String firstPath = "trials/home1/trial.txt";
        String secondPath = "trials/home2/trial.txt";
        String thirdPath = "trials/home3/trial.txt";
        String fourthPath = "trials/home4/trial.txt";
        String fifthPath = "trials/home5/trial.txt";
        ArrayList<String> homeNames = new ArrayList<String>();
        homeNames.clear();
        homeNames.add("home1");
        homeNames.add("home2");
        homeNames.add("home3");
        homeNames.add("home4");
        homeNames.add("home5");
        ArrayList<String> trials = new ArrayList<String>();
        trials.clear();
        ReadFileData rd = new ReadFileData();
        trials.add(rd.fileData(firstPath));
        trials.add(rd.fileData(secondPath));
        trials.add(rd.fileData(thirdPath));
        trials.add(rd.fileData(fourthPath));
        trials.add(rd.fileData(fifthPath));
        //
         JFrame frame = new JFrame();
            Vector<Vector> rowData = new Vector<Vector>();
            rowData.clear();
            Vector<String> row = null;
            Vector<String> columnNames = new Vector<String>();
            columnNames.clear();
            columnNames.addElement("HOME NAME");
            columnNames.addElement("TRIALS COUNT");
            for (int i = 0; i < homeNames.size(); i++) {
                row = new Vector<String>();
                row.add(homeNames.get(i));
                row.add(trials.get(i).toString());
                rowData.add(row);
            }
            JTable table = new JTable(rowData, columnNames);
        JTableHeader header = table.getTableHeader();
        header.setDefaultRenderer(new KeepSortIconHeaderRenderer(header.getDefaultRenderer()));
        table.getTableHeader().setDefaultRenderer(new HeaderRenderer());

        JScrollPane scrollPane = new JScrollPane(table);

        frame.add(scrollPane, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 200);
        frame.setTitle("HOME TRIALS");
        frame.setVisible(true);
        frame.setResizable(true);
        //
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoardFinal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              DashBoardFinal db=  new DashBoardFinal();
              db.setVisible(true);
              db.setSize(638, 550);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton entry;
    private javax.swing.JLabel face;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JLabel l3;
    private javax.swing.JLabel l4;
    private javax.swing.JPasswordField passWordEntry;
    private javax.swing.JButton pwd;
    private javax.swing.JButton si;
    private javax.swing.JTextField trial;
    // End of variables declaration//GEN-END:variables
}
