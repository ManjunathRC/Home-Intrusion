/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package homeintrusion;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.JTableHeader;

/**
 *
 * @author knowx
 */
public class HomeDeployment extends javax.swing.JFrame {

    ArrayList<Integer> distancesInHouse = new ArrayList<Integer>();

    public HomeDeployment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        homes = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        homes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "home1", "home2", "home3", "home4", "home5" }));

        jButton1.setText("fetch distances");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("display speeds");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("PASSWORD");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("display trials");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(homes, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton2)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(homes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton5))
                .addGap(111, 111, 111))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String homeType = homes.getSelectedItem().toString();
            String fileName = "";
            if (homeType.equals("home1")) {
                fileName = "distances/home1.txt";
            }
            if (homeType.equals("home2")) {
                fileName = "distances/home2.txt";
            }
            if (homeType.equals("home3")) {
                fileName = "distances/home3.txt";
            }
            if (homeType.equals("home4")) {
                fileName = "distances/home4.txt";
            }
            if (homeType.equals("home5")) {
                fileName = "distances/home5.txt";
            }

            FileInputStream fis = new FileInputStream(fileName);
            byte bb[] = new byte[fis.available()];
            fis.read(bb);
            fis.close();

            String distances = new String(bb);
            distances = distances.trim();
            StringTokenizer st = new StringTokenizer(distances, "\r\n");
            while (st.hasMoreTokens()) {
                distancesInHouse.add(Integer.parseInt(st.nextToken()));
            }

            FileOutputStream fosDist = new FileOutputStream("dist.txt");
            ObjectOutputStream osDist = new ObjectOutputStream(fosDist);
            osDist.writeObject(distancesInHouse);
            osDist.close();
            fosDist.close();

            FileOutputStream fosHouseType = new FileOutputStream("hname.txt");
            ObjectOutputStream osHouseType = new ObjectOutputStream(fosHouseType);
            osHouseType.writeObject(homeType);
            osHouseType.close();
            fosHouseType.close();

            ArrayList<Integer> speed = new ArrayList<Integer>();
            speed.clear();
            speed.add(3);
            speed.add(2);
            speed.add(5);
            speed.add(4);
            speed.add(2);

            FileOutputStream fosSpeed = new FileOutputStream("speed.txt");
            ObjectOutputStream osSpeed = new ObjectOutputStream(fosSpeed);
            osSpeed.writeObject(speed);
            osSpeed.close();
            fosSpeed.close();

            EntryScreen ec = new EntryScreen();
            ec.setVisible(true);

            this.dispose();
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
//      DisplaySpeeds ds = new DisplaySpeeds();
//      ds.displaySpeeds();
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_formComponentShown

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DisplaySpeeds ds = new DisplaySpeeds();
        ds.displaySpeeds();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            try {
                JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                String filePath = "";
                String str = "one two three four one two three four";
                int returnValue = jfc.showOpenDialog(null);
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = jfc.getSelectedFile();
                    filePath = selectedFile.getAbsolutePath();
                    //System.out.println(selectedFile.getAbsolutePath());}
                    System.out.println(filePath);
                }

                //
                FileInputStream fis = new FileInputStream(filePath);
                byte bb[] = new byte[fis.available()];
                fis.read(bb);
                fis.close();

                String originalString = new String(bb);
                str = originalString;
                str = str.replaceAll("\r\n", " ");
                //System.out.println(str);
                ArrayList<String> wholeData = new ArrayList<String>();
                wholeData.clear();

                StringTokenizer st = new StringTokenizer(str, " ");
                while (st.hasMoreTokens()) {
                    wholeData.add(st.nextToken());
                }
                ArrayList<String> unique = new ArrayList<String>();
                unique.clear();
                unique = (ArrayList<String>) wholeData.clone();
                Set set = new HashSet(unique);
                unique.clear();
                unique.addAll(set);

                ArrayList<Integer> allWeights = new ArrayList<Integer>();
                allWeights.clear();

                allWeights = new SetGetWeights().setWeights(unique);

                for (int i = 0; i < allWeights.size(); i++) {
                    //System.out.println(unique.get(i)+"   "+allWeights.get(i));
                }
                // System.out.println("---------------------------------");
                ArrayList<Integer> allReps = new ArrayList<Integer>();
                allReps.clear();
                for (int i = 0; i < wholeData.size(); i++) {
                    String data = wholeData.get(i);
                    int index = unique.indexOf(data);
                    int value = allWeights.get(index);
                    allReps.add(value);
                }
                for (int i = 0; i < allReps.size(); i++) {
                    // System.out.print(allReps.get(i));
                    // System.out.print("\t");
                }
                //System.out.println();
                for (int i = 0; i < wholeData.size(); i++) {
                    // System.out.print(wholeData.get(i));
                    // System.out.print("\t");
                }
                // System.out.println();
                // System.out.println("---------------------------------");

                ArrayList<String> invertMatrix = new ArrayList<String>();
                invertMatrix.clear();

                ArrayList<String> neighbourItems = new ArrayList<String>();
                neighbourItems.clear();
                int count = 0;
                String invertString = "";
                for (int i = 0; i < unique.size(); i++) {
                    String outerItem = unique.get(i);
                    for (int j = 0; j < wholeData.size() - 1; j++) {
                        String innerItem = wholeData.get(j);
                        if (innerItem.equals(outerItem)) {
                            neighbourItems.add(wholeData.get(j + 1));
                        }
                    }
                    ArrayList<String> neighbourUniqueItems = new ArrayList<String>();
                    neighbourUniqueItems.clear();
                    neighbourUniqueItems = (ArrayList<String>) neighbourItems.clone();
                    Set set1 = new HashSet(neighbourUniqueItems);
                    neighbourUniqueItems.clear();
                    neighbourUniqueItems.addAll(set1);

                    for (int k = 0; k < neighbourUniqueItems.size(); k++) {
                        String nUnique = neighbourUniqueItems.get(k);
                        int frequency = Collections.frequency(neighbourItems, nUnique);
                        for (int l = 0; l < frequency; l++) {
                            int index = unique.indexOf(nUnique);
                            int value = allWeights.get(index);
                            ++count;
                            invertString = invertString + outerItem + "[" + value + "," + count + "]" + "  ";
                        }
                        invertMatrix.add(invertString);
                        neighbourItems.clear();
                        neighbourUniqueItems.clear();
                        count = 0;
                        invertString = "";
                    }
                }
                //System.out.println("---------------------------------");

                for (int i = 0; i < invertMatrix.size(); i++) {
                    System.out.println(invertMatrix.get(i));
                }

                //
                JFrame frame = new JFrame();
                Vector<Vector> rowData = new Vector<Vector>();
                rowData.clear();
                Vector<String> row = null;
                Vector<String> columnNames = new Vector<String>();
                columnNames.clear();
                columnNames.addElement("ITEM");
                columnNames.addElement("WEIGHTAGE");
                for (int i = 0; i < unique.size(); i++) {
                    row = new Vector<String>();
                    row.add(unique.get(i));
                    row.add(allWeights.get(i).toString());
                    rowData.add(row);
                }
                JTable table = new JTable(rowData, columnNames);
                JTableHeader header = table.getTableHeader();
                header.setDefaultRenderer(new KeepSortIconHeaderRenderer(header.getDefaultRenderer()));
                table.getTableHeader().setDefaultRenderer(new HeaderRenderer());

                JScrollPane scrollPane = new JScrollPane(table);

                frame.add(scrollPane, BorderLayout.CENTER);
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(600, 200);
                frame.setTitle("PATTERN WEIGHTAGES");
                frame.setVisible(true);
                frame.setResizable(true);

                Password pwd = new Password(unique);
                pwd.setVisible(true);

            } catch (Exception e) {
                System.out.println(e);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            String firstPath = "trials/home1/trial.txt";
            String secondPath = "trials/home2/trial.txt";
            String thirdPath = "trials/home3/trial.txt";
            String fourthPath = "trials/home4/trial.txt";
            String fifthPath = "trials/home5/trial.txt";
            ArrayList<String> homeNames = new ArrayList<String>();
            homeNames.clear();
            homeNames.add("home1");
            homeNames.add("home2");
            homeNames.add("home3");
            homeNames.add("home4");
            homeNames.add("home5");
            ArrayList<String> trials = new ArrayList<String>();
            trials.clear();
            ReadFileData rd = new ReadFileData();
            trials.add(rd.fileData(firstPath));
            trials.add(rd.fileData(secondPath));
            trials.add(rd.fileData(thirdPath));
            trials.add(rd.fileData(fourthPath));
            trials.add(rd.fileData(fifthPath));
            //
            JFrame frame = new JFrame();
            Vector<Vector> rowData = new Vector<Vector>();
            rowData.clear();
            Vector<String> row = null;
            Vector<String> columnNames = new Vector<String>();
            columnNames.clear();
            columnNames.addElement("HOME NAME");
            columnNames.addElement("TRIALS COUNT");
            for (int i = 0; i < homeNames.size(); i++) {
                row = new Vector<String>();
                row.add(homeNames.get(i));
                row.add(trials.get(i).toString());
                rowData.add(row);
            }
            JTable table = new JTable(rowData, columnNames);
            JTableHeader header = table.getTableHeader();
            header.setDefaultRenderer(new KeepSortIconHeaderRenderer(header.getDefaultRenderer()));
            table.getTableHeader().setDefaultRenderer(new HeaderRenderer());

            JScrollPane scrollPane = new JScrollPane(table);

            frame.add(scrollPane, BorderLayout.CENTER);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(600, 200);
            frame.setTitle("HOME TRIALS");
            frame.setVisible(true);
            frame.setResizable(true);
            //
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeDeployment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeDeployment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeDeployment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeDeployment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeDeployment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> homes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
